git help <命令名> - 查看帮助文档

git init 初始化一个本地仓库
git config user.name wanghaha
git config user.email 710501363@qq.com 为当前仓库设置签名

git config -global user.name wanghaha
git config -global user.email 710501363@qq.com 为系统级别设置签名

当前仓库签名和系统级别签名如果两者都设置了，那么会就近选择使用当前仓库的签名，如果都没有设置
那么git无法识别身份，操作会报错

git add 将文件添加进git进行管理(相当于文件处于暂存区) -将一个未被git管理的文件变成受git追踪的文件
git rm --cached <file> 可以撤销已经处于暂存区的文件
git commit 将暂存区的文件添加到本地库
git checkout -- <file>  取消在工作空间的改动
git commit -a
git commit -m "提交信息" <file> 提交文件 不用进入vim编辑器，直接输入提交信息

日志查看命令:
git log 查看提交记录日志(最完整的详细信息)
	多屏显示控制方式:空格向下翻页，b向上翻页，q退出
git log --pretty=oneline 只显示一行，显示哈希值和改动信息
git log --oneline 和上面的差不多，但是哈希值不是完整的显示更加简洁
git reflog 在oneline的基础上显示了 head@{移动到当前版本需要多少步}

版本控制回退命令:
git reset --hard <局部哈希索引值> ps:可以先用git reflog命令再用版本控制命令
    reset命令的三个参数对比:
    	--soft:仅仅是在本地库移动HEAD指针
	--hard:在本地库移动HEAD指针，重置暂存区和工作区
	--mixed:在本地库移动HEAD指针，重置暂存区

删除文件的恢复(前提是文件存在时的状态添加到了本地库):
	1.如果删除文件的操作已经使用过了commit命令。那么说明已经提交到了本地库了，只要通过reset控制版本回退就可以了
	2.如果删除文件的操作只用了add添加到了暂存区，还没有添加到本地库那么只要使用git reset --hard HEAD(指向当期操作)就可以了

比较文件差异:
	git diff <file> 不加参数,将工作区的文件和暂存区进行比较
	git diff HEAD 和本地库进行比较
	git diff HEAD<索引> 和某一个历史版本进行比较 


分支的操作:
	git branch -v 查看所有的分支
	git branch <分支名> 创建新的分支
	git checkout <分支名> 切换到对应的分支


